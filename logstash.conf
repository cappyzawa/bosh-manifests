input {
  tcp {
    add_field => [ "type", "syslog" ]
    port => "8844"
    ssl_enable => true
    ssl_cert => "/var/vcap/jobs/logstash/config/tls.crt"
    ssl_key => "/var/vcap/jobs/logstash/config/tls.key"
    ssl_verify => false
  }
}
output { 
  stdout { 
    codec => "json_lines" 
  }
  elasticsearch {
    hosts => __ES_HOSTS__
  }
}
filter {
  ruby {
    code => 'event.cancel if event.get("message") == "\u0000"'
  }
  mutate {
    remove_field => [ "host" ]
  }
  if [type] != '' {
      mutate {
          rename => [ "type", "@type" ]
      }
  }
  if [message] != '' {
      mutate {
          rename => [ "message", "@message" ]
      }
  } else if [message] == '' and [@message] !~ /^.+$/ {
      drop { }
  }
  if [@type] == "" {
      mutate {
          add_field => [ "@type", "unknown" ]
      }
  }
  if [@message] =~ /^\s*$/ or [@message] =~ /^#.*$/ {
      drop { }
  }
  mutate {
      strip => [ "@message" ]
  }

  grok {
      match => { "@message" => "(?:%{INT:syslog6587_msglen} )?<%{POSINT:syslog_pri}>(%{SPACE})?(?:%{NONNEGINT:syslog5424_ver} )?(?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:syslog_timestamp}) %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?(:)? %{GREEDYDATA:syslog_message}" }
      match => { "@message" => "<%{POSINT:syslog_pri}>(%{SPACE})?%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:syslog_program}\[%{POSINT:syslog_pid}\]: %{GREEDYDATA:syslog_message}" }
      add_tag => [ "syslog_standard" ]
      add_field => { "@raw" => "%{@message}"}
      tag_on_failure => ["fail/syslog_standard/_grokparsefailure"]
  }

  if !("fail/syslog_standard/_grokparsefailure" in [tags]) {
      syslog_pri { }

      date {
          match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
          timezone => "UTC"
          remove_field => "syslog_timestamp"
      }

      mutate {
          add_field => [ "[@source][host]", "%{syslog_hostname}" ]
      }

      mutate {
          convert => [ "syslog5424_ver", "integer" ]
          convert => [ "syslog6587_msglen", "integer" ]
      }

      if [syslog5424_ver] == 1 {
          grok {
              match => [ "syslog_message", "(?:%{DATA:syslog_procid}|\-) (?:%{DATA:syslog_msgid}|\-)(?: %{SYSLOG5424SD:syslog_sd}| \-)? %{GREEDYDATA:syslog_message}" ]
              overwrite => [
                  "syslog_message"
              ]
              tag_on_failure => [ "fail/syslog_standard/_grokparsefailure-syslog_standard-5424" ]
          }

          if [syslog_sd] {
              grok {
                  match => [ "syslog_sd", "\[%{DATA:syslog_sd_id} (?<syslog_sd_params_raw]>[^\]]+)\]" ]
                  remove_field => [
                      "syslog_sd"
                  ]
                  tag_on_failure => [ "fail/syslog_standard/_grokparsefailure-syslog_standard-5424/sds" ]
              }

              if !("fail/syslog_standard/_grokparsefailure-syslog_standard-5424/sd" in [tags]) {
                  kv {
                      source => "syslog_sd_params_raw"
                      target => "syslog_sd_params"
                      remove_field => [
                          "syslog_sd_params_raw"
                      ]
                  }
                  if [syslog_sd_params][host] {
                    mutate {
                      add_field => { "[@shipper][host]" => "%{[syslog_hostname]}" }
                      replace => { "[@source][host]" => "%{[syslog_sd_params][host]}" }
                    }
                  }

                  if [syslog_sd_params][type] {
                     mutate {
                         replace => { "@type" => "%{syslog_sd_params[type]}" }
                     }

                  }
              }
          }
      }
      mutate {
        rename => { "syslog_message" => "@message" }
      }
  }
}

